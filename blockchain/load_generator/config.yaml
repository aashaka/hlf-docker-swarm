# Config structure:

brief: 80Tx/s, Batch-30, open system, 4-Endorsers, 1-Channels - Full: '10 8 1 30 4 1 open 1 LevelDB 2vCPU WriteRandom NO_OPT InternPresentation'

##
## Load related settings
##
#numClients: 10                 # 10 clients will hammer the network
numProcesses: 1                # Number of processes to spawn
numClientsPerProcess: 1         # Number of clients per process
loadDurationMs: 240000          # Load will last 10 minutes
numLocalRequestsPerSec: 1  # 10      # Make 10 requests a second per client
openSystem: true # Whether system is open or not
dbType: goleveldb 

## Information about the deployed chaincode
channels: ch1 #,ch2,ch3,ch4 #,ch2,ch3,ch4,ch5,ch6,ch7,ch8                 # Don't put spaces between commas!
#channelName: ch1 
chaincodeVersion: "1.0"
chaincodeName: generic-chaincode
chaincodeId: generic-chaincode

#workloadType: WriteRandom   #WriteRandom #ReadWrite
workloadPath: ./workloads/ChaincodeExample2/ChaincodeExample2.js

chaincodeExample2Load:
    accountA: 'A'
    accountB: 'B'

##
## Misc config
##
batchSize: 30            # Block cutout size 
requestTimeout: 60000    # Number of milliseconds after which a request times out
# endorsementPolicy: "4/4" # The endorsement policy to follow. n/N means n out of N signatures required.
endorsementPolicy: "2/2" # The endorsement policy to follow. n/N means n out of N signatures required.
enableTls: true          # Ignores 'gprcs' if false. Makes 'gprc' -> 'gprcs' if true.

##
## ReadWrite workload settings
##
readWriteWorkload:
    dataFileName: ./readWriteExperiments/.json
    keyLow: 1
    keyHigh: 10000
    keyLength: 10
    nKeysPerTx: 3
    deltaPercent: 10
    conflictRate: 0
    nJSONPropsToUpdate: 1
#    numBootstrapRequestsPerSec: 100
    numBootstrapProcesses: 10
    numBootstrapClientsPerProcess: 10
    numLocalBootstrapRequestsPerSec: 1

## Network specification - same format as that in fabric-sdk-node/test/integration/e2e/config.json
network:
        orderer:
            url: grpc://orderer0:7050
            #server-hostname: orderer.example.com
            #tls_cacerts: ./fixtures/channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/cacerts/example.com-cert.pem
 
        # org0:
        #     name: peerOrg0
        #     mspid: Org0MSP
        #     #ca:
        #     #    url: http://localhost:7054
        #     #    name: ca-org1
        #     peer0:
        #         requests: grpc://peer0:7051
        #         events: grpc://peer0:7053
        #         #server-hostname: peer0.org0.example.com
        #         #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem
        #     peer1:
        #         requests: grpc://peer1:7051
        #         events: grpc://peer1:7053
        #         server-hostname: peer1.org0.example.com
        #         tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem

        org1:
            name: peerOrg1
            mspid: Org1MSP
            #ca:
            #    url: http://localhost:7054
            #    name: ca-org1
            peer0:
                requests: grpc://peer2:7051
                events: grpc://peer2:7053
                #server-hostname: peer0.org0.example.com
                #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem
            peer1:
                requests: grpc://peer3:7051
                events: grpc://peer3:7053
                #server-hostname: peer1.org0.example.com
                #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem

        # org2:
        #     name: peerOrg2
        #     mspid: Org2MSP
        #     #ca:
        #     #    url: http://localhost:7054
        #     #    name: ca-org1
        #     peer0:
        #         requests: grpc://peer4:7051
        #         events: grpc://peer4:7053
        #         #server-hostname: peer0.org0.example.com
        #         #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem
        #     peer1:
        #         requests: grpc://peer5:7051
        #         events: grpc://peer5:7053
        #         #server-hostname: peer1.org0.example.com
        #         #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem

        # org3:
        #     name: peerOrg3
        #     mspid: Org3MSP
        #     #ca:
        #     #    url: http://localhost:7054
        #     #    name: ca-org1
        #     peer0:
        #         requests: grpc://peer6:7051
        #         events: grpc://peer6:7053
        #         #server-hostname: peer0.org0.example.com
        #         #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem
        #     peer1:
        #         requests: grpc://peer7:7051
        #         events: grpc://peer7:7053
        #         #server-hostname: peer1.org0.example.com
        #         #tls_cacerts: ./fixtures/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/cacerts/org1.example.com-cert.pem

##
## Config related to the load generator
##
globalSeed: 1 # Number used to seed all random numbers being generated.

# ReadRandom related config
ReadRandom:
    weight: 10 # weightage of ReadRandom calls to be made by a client
    params:
        nKeys: [3, 25] # Format: [min,max] - a client will call ReadRandom with nKeys set to a
                       # random number between 3 and 25 (Uniform distribution)
        keySize: [1, 20] # Format: [min,max] - keys of len between 1 and 20 will be read

# ReadSequential related config
ReadSequential:
    weight: 10 # Weightage of ReadSequential calls to be made by client.
    params:
        keySize: [1, 20] # Format: [min,max] - startKey and endKey will be selected such that their lengths are between 1 and 20

# ReadByPartialCompositeKey related config
ReadByPartialCompositeKey:
    weight: 10 # Weightage of ReadByPartialCompositeKey calls to be made by client.
    params:
        indexName: "color~priceRange" # Index name to be used for the Composite key
        indexValueSpace: | # color will be selected from "blue,yellow,green" and priceRange from "low,medium,high"
            blue,yellow,green
            low,medium,high

# WriteRandom related config
WriteRandom:
    weight: 10 # Weightage of WriteRandom calls to be made by client.
    params:
        nKeys: [3, 25] # Format: [min,max] - client will call WriteRandom with nKeys set to a
                       # random number between 3 and 25 (Uniform distribution)
        keySize: [1, 20] # Format: [min,max] - keys of len between 1 and 20 will be written
        valSize: [20,50] # Format: [min,max] - keys of len between 20 and 50 characters will be written
        indexName: "color~priceRange" # Index name to be used to createComposite key. Actual index name will
                                      # be color~priceRange~id. Can be empty to not create any composite keys
        indexValueSpace: | # colors will be selected from "blue,yellow,green" and priceRange from "low,medium,high"
            blue,yellow,green
            low,medium,high

# WriteAfterReadRandom related config
WriteAfterReadRandom:
    weight: 10 # Weightage of WriteAfterReadRandom calls to be made by client.
    params:
        nKeys: [3, 25] # Format: [min,max] - client will call WriteRandom with nKeys set to a
                       # random number between 3 and 25 (Uniform distribution)
        keySize: [1, 20] # Format: [min,max] - keys of len between 1 and 20 will be written
        valSize: [20,50] # Format: [min,max] - keys of len between 20 and 50 characters will be written
        indexName: "color~priceRange" # Index name to be used to createComposite key. Actual index name will
                                      # be color~priceRange~id. Can be empty to not create any composite keys
        indexValueSpace: | # colors will be selected from "blue,yellow,green" and priceRange from "low,medium,high"
            blue,yellow,green
            low,medium,high

# WriteAfterReadSequential related config
WriteAfterReadSequential:
    weight: 10 # Weightage of WriteAfterReadSequential calls to be made by client.
    params:
        keySize: [1, 20] # Format: [min,max] - startKey and endKey will be selected such that their lengths are between 1 and 20
        valSize: [20,50] # Format: [min,max] - keys of len between 20 and 50 characters will be written
        indexName: "color~priceRange" # Index name to be used to createComposite key. Actual index name will
                                      # be color~priceRange~id. Can be empty to not create any composite keys
        indexValueSpace: | # colors will be selected from "blue,yellow,green" and priceRange from "low,medium,high"
            blue,yellow,green
            low,medium,high

# GetHistoryOfKey related config
GetHistoryOfKey:
    weight: 10 # Weightage of GetHistoryOfKey calls to be made by client.
    params:
        keySize: [1, 20] # Format: [min,max] - a key of length between 1 and 20 will be used to call GetHistoryOfKey
